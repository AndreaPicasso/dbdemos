import re
import base64
import urllib.parse
import json
from dbdemos.installer import Installer



def test_dynamic_link():
    t = """{"version":"NotebookV1","origId":4313537760349134,"name":"DLT-Test-Dataset-setup","language":"python","commands":[{"version":"CommandV1","origId":4313537760349135,"guid":"8239d1c2-259c-4739-bf8a-4fe9f4b2f638","subtype":"command","commandType":"auto","position":2.0,"command":"%md \n# Test Datasets setup\n\nWe have 2 files that we'll be using as dataset saved in git within the project (you can open them directly under the `dataset` folder). \n\nAll we have to do is move these local files to our blob storage so that we can read them within our DLT test pipeline.\n\n*Note: We could also have used Faker to generate them dynamicall.*\n\n<!-- do not remove -->\n<img width=\"1px\" src=\"https://www.google-analytics.com/collect?v=1&gtm=GTM-NKQ8TT7&tid=UA-163989034-1&cid=555&aip=1&t=event&ec=field_demos&ea=display&dp=%2F42_field_demos%2Ffeatures%2Fdlt_unit_test%2Fnotebook_dataset&dt=DLT_UNIT_TEST\">","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"nuid":"2b7b20b6-9949-4721-9086-f4706285153b"},{"version":"CommandV1","origId":4313537760349136,"guid":"fa2c55b0-667d-4727-8f24-6367f1f0dcaf","subtype":"command","commandType":"auto","position":3.0,"command":"#We could use repo arbitrary files, but we'll prefer working without files to support workpsace (non repo) deployment too.\n#dbutils.fs.rm(\"/demos/retail/customers/users_json\", True)\n#dbutils.fs.mkdirs(\"/demos/retail/customers/test/users_json\")\n#dbutils.fs.mkdirs(\"/demos/retail/customers/test/spend_csv\")\n\n#import shutil\n#shutil.copyfile(\"./dataset/users.json\", \"/dbfs/demos/retail/customers/test/users_json/users.json\")\n#shutil.copyfile(\"./dataset/spend.csv\", \"/dbfs/demos/retail/customers/test/spend_csv/spend.csv\")\n\n\nspend_csv = \"\"\"id,age,annual_income,spending_core\n3,47,858.9,99.4\n1,47,861.9,48.1\n2,97,486.4,880.8\n4,,283.8,117.8\n,95,847.5,840.9\ninvalid_id,1,514.5,284.5\"\"\"\n\nwith open('/dbfs/demos/retail/customers/test/spend_csv/spend.csv', 'w') as f:\n    f.write(spend_csv)\n    \nusers_json = \"\"\"{\"id\":1,\"email\":\"joneschristina@example.org\",\"creation_date\":\"11-28-2021 12:08:46\",\"last_activity_date\":\"08-20-2021 08:24:44\",\"firstname\":\"Randall\",\"lastname\":\"Espinoza\",\"address\":\"71571 Jennifer Creek - East John, CO 81653\",\"city\":\"Port Nicholas\",\"last_ip\":\"22.207.225.77\",\"postcode\":\"62389\"}\n{\"id\":4,\"email\":\"christybautista@example.net\",\"creation_date\":\"06-30-2022 22:51:30\",\"last_activity_date\":\"08-22-2021 17:25:06\",\"firstname\":\"Jose\",\"lastname\":\"Bell\",\"address\":\"865 Young Crest - Lake Adriennebury, VA 67749\",\"city\":\"Brownstad\",\"last_ip\":\"159.111.101.250\",\"postcode\":\"52432\"}\n{\"id\":0,\"email\":\"amccormick@example.com\",\"creation_date\":\"10-21-2021 02:37:38\",\"last_activity_date\":\"07-22-2021 15:06:48\",\"firstname\":\"Dylan\",\"lastname\":\"Barber\",\"address\":\"7995 Ronald Flat Suite 597 - Williefurt, AL 37894\",\"city\":\"Port Steven\",\"last_ip\":\"173.88.213.168\",\"postcode\":\"58368\"}\n{\"id\":3,\"email\":\"jenniferbennett@example.org\",\"creation_date\":\"07-06-2022 12:27:24\",\"last_activity_date\":\"01-09-2022 15:04:45\",\"firstname\":\"Phillip\",\"lastname\":\"Morgan\",\"address\":\"523 Garza Crossroad - New Maryview, OK 92301\",\"city\":\"Julieshire\",\"last_ip\":\"170.233.120.199\",\"postcode\":\"34528\"}\n{\"id\":2,\"email\":\"alexis25@example.org\",\"creation_date\":\"09-10-2021 02:31:37\",\"last_activity_date\":\"01-11-2022 20:39:01\",\"firstname\":\"Gregory\",\"lastname\":\"Crane\",\"address\":\"068 Shawn Port - West Jessica, KS 84864\",\"city\":\"South Tonya\",\"last_ip\":\"192.220.63.96\",\"postcode\":\"88033\"}\n{\"email\":\"davidporter@example.com\",\"creation_date\":\"05-28-2022 09:54:50\",\"last_activity_date\":\"12-18-2021 21:48:48\",\"firstname\":\"Jeremy\",\"lastname\":\"Knight\",\"address\":\"06183 Acevedo Bypass - Petermouth, ME 34177\",\"city\":\"West Brianburgh\",\"last_ip\":\"53.240.159.208\",\"postcode\":\"73380\"}\n{\"id\":\"invalid ID\",\"email\":\"margaret84@example.com\",\"creation_date\":\"12-20-2021 19:57:28\",\"last_activity_date\":\"07-27-2021 09:39:28\",\"firstname\":\"Angela\",\"lastname\":\"Adams\",\"address\":\"098 Daniel Ferry Suite 565 - South Andrea, ND 36326\",\"city\":\"New Mariafort\",\"last_ip\":\"7.176.250.65\",\"postcode\":\"21300\"}\"\"\"\n\nwith open('/dbfs/demos/retail/customers/test/users_json/users.json', 'w') as f:\n    f.write(users_json)","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1664184317941,"submitTime":0,"finishTime":1664184319585,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"Move our test resources to DBFS for tests","showCommandTitle":true,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"14d7a778-1d3a-434f-aafa-38089d31fa74"},{"version":"CommandV1","origId":4313537760349137,"guid":"f4dc5244-5364-4e46-9534-7e28a611696f","subtype":"command","commandType":"auto","position":4.0,"command":"%md\n## Review Users dataset\n\nThe ./dataset/users.json dataset contains:\n\n* 4 \"standard users\"\n* 1 user with Null ID\n* 1 user with an ID as a string","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"nuid":"c900c151-3195-48a4-9fd7-bd58d8ef893e"},{"version":"CommandV1","origId":4313537760349138,"guid":"821d27d2-ed56-4869-96b5-ee1dc1749c83","subtype":"command","commandType":"auto","position":5.0,"command":"%fs head /demos/retail/customers/test/users_json/users.json","commandVersion":1,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">{&quot;id&quot;:1,&quot;email&quot;:&quot;joneschristina@example.org&quot;,&quot;creation_date&quot;:&quot;11-28-2021 12:08:46&quot;,&quot;last_activity_date&quot;:&quot;08-20-2021 08:24:44&quot;,&quot;firstname&quot;:&quot;Randall&quot;,&quot;lastname&quot;:&quot;Espinoza&quot;,&quot;address&quot;:&quot;71571 Jennifer Creek - East John, CO 81653&quot;,&quot;city&quot;:&quot;Port Nicholas&quot;,&quot;last_ip&quot;:&quot;22.207.225.77&quot;,&quot;postcode&quot;:&quot;62389&quot;}\n{&quot;id&quot;:4,&quot;email&quot;:&quot;christybautista@example.net&quot;,&quot;creation_date&quot;:&quot;06-30-2022 22:51:30&quot;,&quot;last_activity_date&quot;:&quot;08-22-2021 17:25:06&quot;,&quot;firstname&quot;:&quot;Jose&quot;,&quot;lastname&quot;:&quot;Bell&quot;,&quot;address&quot;:&quot;865 Young Crest - Lake Adriennebury, VA 67749&quot;,&quot;city&quot;:&quot;Brownstad&quot;,&quot;last_ip&quot;:&quot;159.111.101.250&quot;,&quot;postcode&quot;:&quot;52432&quot;}\n{&quot;id&quot;:0,&quot;email&quot;:&quot;amccormick@example.com&quot;,&quot;creation_date&quot;:&quot;10-21-2021 02:37:38&quot;,&quot;last_activity_date&quot;:&quot;07-22-2021 15:06:48&quot;,&quot;firstname&quot;:&quot;Dylan&quot;,&quot;lastname&quot;:&quot;Barber&quot;,&quot;address&quot;:&quot;7995 Ronald Flat Suite 597 - Williefurt, AL 37894&quot;,&quot;city&quot;:&quot;Port Steven&quot;,&quot;last_ip&quot;:&quot;173.88.213.168&quot;,&quot;postcode&quot;:&quot;58368&quot;}\n{&quot;id&quot;:3,&quot;email&quot;:&quot;jenniferbennett@example.org&quot;,&quot;creation_date&quot;:&quot;07-06-2022 12:27:24&quot;,&quot;last_activity_date&quot;:&quot;01-09-2022 15:04:45&quot;,&quot;firstname&quot;:&quot;Phillip&quot;,&quot;lastname&quot;:&quot;Morgan&quot;,&quot;address&quot;:&quot;523 Garza Crossroad - New Maryview, OK 92301&quot;,&quot;city&quot;:&quot;Julieshire&quot;,&quot;last_ip&quot;:&quot;170.233.120.199&quot;,&quot;postcode&quot;:&quot;34528&quot;}\n{&quot;id&quot;:2,&quot;email&quot;:&quot;alexis25@example.org&quot;,&quot;creation_date&quot;:&quot;09-10-2021 02:31:37&quot;,&quot;last_activity_date&quot;:&quot;01-11-2022 20:39:01&quot;,&quot;firstname&quot;:&quot;Gregory&quot;,&quot;lastname&quot;:&quot;Crane&quot;,&quot;address&quot;:&quot;068 Shawn Port - West Jessica, KS 84864&quot;,&quot;city&quot;:&quot;South Tonya&quot;,&quot;last_ip&quot;:&quot;192.220.63.96&quot;,&quot;postcode&quot;:&quot;88033&quot;}\n{&quot;email&quot;:&quot;davidporter@example.com&quot;,&quot;creation_date&quot;:&quot;05-28-2022 09:54:50&quot;,&quot;last_activity_date&quot;:&quot;12-18-2021 21:48:48&quot;,&quot;firstname&quot;:&quot;Jeremy&quot;,&quot;lastname&quot;:&quot;Knight&quot;,&quot;address&quot;:&quot;06183 Acevedo Bypass - Petermouth, ME 34177&quot;,&quot;city&quot;:&quot;West Brianburgh&quot;,&quot;last_ip&quot;:&quot;53.240.159.208&quot;,&quot;postcode&quot;:&quot;73380&quot;}\n{&quot;id&quot;:&quot;invalid ID&quot;,&quot;email&quot;:&quot;margaret84@example.com&quot;,&quot;creation_date&quot;:&quot;12-20-2021 19:57:28&quot;,&quot;last_activity_date&quot;:&quot;07-27-2021 09:39:28&quot;,&quot;firstname&quot;:&quot;Angela&quot;,&quot;lastname&quot;:&quot;Adams&quot;,&quot;address&quot;:&quot;098 Daniel Ferry Suite 565 - South Andrea, ND 36326&quot;,&quot;city&quot;:&quot;New Mariafort&quot;,&quot;last_ip&quot;:&quot;7.176.250.65&quot;,&quot;postcode&quot;:&quot;21300&quot;}\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1664184319620,"submitTime":0,"finishTime":1664184325421,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["html",3396]],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"23a8bf74-60df-401e-adb8-064efb7c4929"},{"version":"CommandV1","origId":4313537760349139,"guid":"a0d9d6fc-1d16-42b2-94e7-870a79b4bc81","subtype":"command","commandType":"auto","position":6.0,"command":"%md\n## Review Spend dataset\n\nThe ./dataset/spend.csv dataset contains:\n\n* 3 \"standard spends\"\n* 1 spend with Null age\n* 1 spend with null ID\n* 1 spend with incompatible schema (ID as string)","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"nuid":"62b1a38a-6c61-4c2d-8e41-e555dd7e05fa"},{"version":"CommandV1","origId":4313537760349140,"guid":"52f616a8-f435-43c9-a12d-93bd86b5c9d7","subtype":"command","commandType":"auto","position":7.0,"command":"%fs head /demos/retail/customers/test/spend_csv/spend.csv","commandVersion":1,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">id,age,annual_income,spending_core\n3,47,858.9,99.4\n1,47,861.9,48.1\n2,97,486.4,880.8\n4,,283.8,117.8\n,95,847.5,840.9\ninvalid_id,1,514.5,284.5\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1664184325444,"submitTime":0,"finishTime":1664184325758,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["html",167]],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"e94b1854-30f8-496c-993f-957aca86e655"},{"version":"CommandV1","origId":4313537760349141,"guid":"8ab695a2-295a-4128-84bc-5ae6c4097d76","subtype":"command","commandType":"auto","position":8.0,"command":"%md\nThat's it, our dataset is ready!","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":null,"subcommandOptions":null,"contentSha256Hex":null,"nuid":"fcec972d-ad68-4cc2-bf77-8a68e7f1bbbb"}],"dashboards":[],"guid":"6c591213-68a2-469e-8e17-fbe0afaa41ca","globalVars":{},"iPythonMetadata":null,"inputWidgets":{},"notebookMetadata":{},"reposExportFormat":"SOURCE"}{"version":"NotebookV1","origId":2948424166895050,"name":"DLT-pipeline-to-test","language":"python","commands":[{"version":"CommandV1","origId":2948424166895056,"guid":"e4b4ba19-9b90-4e48-9cab-5b354712866f","subtype":"command","commandType":"auto","position":2.0,"command":"%md \n# Delta live table - Unit testing\n\n## Why testing?\n\nDeploying tests on your DLT pipelines will gaurantee that your ingestion is always stable and future proof.\n\nThe tests can be deployed as part of traditional CI/CD pipeline and can be run before a new version deployment, ensuring that a new version won't introduce a regression.\n\nThis is critical in the Lakehouse ecosystem, as the data we produce will then leveraged downstream:\n\n* By Data Analyst for reporting/BI\n* By Data Scientists to build ML model for downstream applications\n\n## Unit testing strategy with DLT\n\nDelta Live Table logic can be unit tested leveraging Expectation.\n\nAt a high level, the DLT pipelines can be constructed as following:\n\n* The ingestion step (first step of the pipeline on the left) is written in a separate notebook. This correspond to the left **green** (prod) and **blue** (test) input sources.\n   * The Production pipeline is defined with the PROD ingestion notebook:[./ingestion_profile/DLT-ingest_prod]($./ingestion_profile/DLT-ingest_prod) and connects to the live datasource (ex: kafka server, staging blob storage)\n   * The Test pipeline (only used to run the unit test) is defined with the TEST ingestion notebook: [./ingestion_profile/DLT-ingest_test]($./ingestion_profile/DLT-ingest_test) and can consume from local files used for our unit tests (ex: adhoc csv file)\n* A common DLT pipeline logic is used for both the prod and the test pipeline (the **yellow** in the graph)\n* An additional notebook containing all the unit tests is used in the TEST pipeline (the **blue `TEST_xxx` tables** in the image on the right side)\n\n\n<div><img width=\"1100\" src=\"https://github.com/QuentinAmbard/databricks-demo/raw/main/product_demos/dlt-advanecd/DLT-advanced-unit-test-0.png\"/></div>\n\n## Accessing the DLT pipeline\n\nYour pipeline has been created! You can directly access the <a dbdemos-pipeline-id=\"dlt-test\" href=\"https://e2-demo-field-eng.cloud.databricks.com/?o=1444828305810485#joblist/pipelines/cade4f82-4003-457c-9f7c-a8e5559873b6\">Delta Live Table Pipeline for unit-test demo</a>.\n\n<!-- do not remove -->\n<img width=\"1px\" src=\"https://www.google-analytics.com/collect?v=1&gtm=GTM-NKQ8TT7&tid=UA-163989034-1&cid=555&aip=1&t=event&ec=field_demos&ea=display&dp=%2F42_field_demos%2Ffeatures%2Fdlt_unit_test%2Fnotebook_main&dt=DLT_UNIT_TEST\">","commandVersion":61,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"467cd8ae-7868-4682-84b8-6939c6c23f8b"},{"version":"CommandV1","origId":2948424166895065,"guid":"54f1be68-9a7e-4e6f-bf65-757220606648","subtype":"command","commandType":"auto","position":3.0,"command":"%md-sandbox\n\n## Main Pipeline definition\n\n<img style=\"float: right\" width=\"700px\" src=\"https://github.com/QuentinAmbard/databricks-demo/raw/main/product_demos/dlt-advanecd/DLT-advanced-unit-test-2.png\"/>\n\nThis notebook contains the main pipeline definition, the one we want to test (in yellow in the diagram).\n\nFor this example, we centralized our main expectations in a metadata table that we'll use in the table definition.\n\nTheses expectations are your usual expectations, used to ensure and track data quality during the ingestion process. \n\nWe can then build DBSQL dashboard on top of it and triggers alarms when we see error in our data (ex: incompatible schema, increasing our expectation count)","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"8f18fd99-16f9-4f8c-9c8b-8b2fdf031c78"},{"version":"CommandV1","origId":2948424166895076,"guid":"860a44a8-66b2-4f5b-b46f-d412f2104f9b","subtype":"command","commandType":"auto","position":4.0,"command":"# In this example, we'll store our rules as a delta table for more flexibility & reusability. \n# While this isn't directly related to Unit test, it can also help for programatical analysis/reporting.\n\ndata = [\n # tag/table name      name              constraint\n (\"user_bronze_dlt\",  \"correct_schema\", \"_rescued_data IS NULL\"),\n (\"user_silver_dlt\",  \"valid_id\",       \"id IS NOT NULL AND id > 0\"),\n (\"spend_silver_dlt\", \"valid_id\",       \"id IS NOT NULL AND id > 0\"),\n (\"user_gold_dlt\",    \"valid_age\",      \"age IS NOT NULL\"),\n (\"user_gold_dlt\",    \"valid_income\",   \"annual_income IS NOT NULL\"),\n (\"user_gold_dlt\",    \"valid_score\",    \"spending_core IS NOT NULL\")\n]\n#Typically only run once, this doesn't have to be part of the DLT pipeline.\nspark.createDataFrame(data=data, schema=[\"tag\", \"name\", \"constraint\"]).write.mode(\"overwrite\").save(\"/demos/product/dlt_unit_test/expectations\")","commandVersion":81,"state":"finished","results":{"type":"listResults","data":[],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1663921735999,"submitTime":1663921731814,"finishTime":1663921756521,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"Define all our expectations as a metadata table","showCommandTitle":true,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"21121815-5c7b-4f62-9ee4-eeefc765edfb"},{"version":"CommandV1","origId":2948424166895084,"guid":"c9a0ec01-afef-4981-b4df-7d88be9cca0a","subtype":"command","commandType":"auto","position":5.0,"command":"#Return the rules matching the tag as a format ready for DLT annotation.\nfrom pyspark.sql.functions import expr, col\n\ndef get_rules(tag):\n  \"\"\"\n    loads data quality rules from csv file\n    :param tag: tag to match\n    :return: dictionary of rules that matched the tag\n  \"\"\"\n  rules = {}\n  df = spark.read.load(\"/demos/product/dlt_unit_test/expectations\").where(f\"tag = '{tag}'\")\n  for row in df.collect():\n    rules[row['name']] = row['constraint']\n  return rules\n","commandVersion":15,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"Make expectations portable and reusable from a Delta Table","showCommandTitle":true,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"56296f99-e19a-49e1-8fb7-33f332433516"},{"version":"CommandV1","origId":2948424166895093,"guid":"758a7089-6ab1-4038-add2-1fbd1da01087","subtype":"command","commandType":"auto","position":6.0,"command":"%md\n### 1/ Loading our data\n\nThis is the first step of the pipeline. Note that we consume the data from the `raw_user_data` view.\n\nThis view is defined in the ingestion notebooks:\n* For PROD: [./ingestion_profile/DLT-ingest_prod]($./ingestion_profile/DLT-ingest_prod), reading from prod system (ex: kafka)\n* For TEST: [./ingestion_profile/DLT-ingest_test]($./ingestion_profile/DLT-ingest_test), consuming the test dataset (csv files)\n\nStart by reviewing th notebooks to see how the data is ingested.\n\n\n*Note: DLT is available as SQL or Python, this example will use Python*","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"2b163e3c-27ca-427c-a2e2-091533799d29"},{"version":"CommandV1","origId":2948424166895104,"guid":"c039074d-eef4-4558-a8d3-978f0bf29ed1","subtype":"command","commandType":"auto","position":7.0,"command":"import dlt\n\n@dlt.table(comment=\"Raw user data\")\n@dlt.expect_all_or_drop(get_rules('user_bronze_dlt')) #get the rules from our centralized table.\ndef user_bronze_dlt():\n  return dlt.read_stream(\"raw_user_data\")","commandVersion":9,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"Ingest raw User stream data in incremental mode","showCommandTitle":true,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"1e210e30-4969-4aed-a344-155dc14c1be5"},{"version":"CommandV1","origId":2948424166895111,"guid":"abe20055-fb7d-4f1d-8129-1970a5a5696b","subtype":"command","commandType":"auto","position":8.0,"command":"%md-sandbox\n### 2/ Customer Silver layer\nThe silver layer is consuming **incremental** data from the bronze one, and cleaning up some information.\n\nWe're also adding an expectation on the ID. As the ID will be used in the next join operation, ID should never be null and be positive.\n\nNote that the expectations have been defined in the metadata expectation table under `user_silver_dlt`","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"78135e6f-e594-4714-931b-422be3685155"},{"version":"CommandV1","origId":2948424166895119,"guid":"bd6d6ef7-8aa3-4274-8fa6-d191373e9327","subtype":"command","commandType":"auto","position":9.0,"command":"from pyspark.sql.functions import *\n\n@dlt.table(comment=\"User data cleaned and anonymized for analysis.\")\n@dlt.expect_all_or_drop(get_rules('user_silver_dlt'))\ndef user_silver_dlt():\n  return (\n    dlt.read_stream(\"user_bronze_dlt\").select(\n      col(\"id\").cast(\"int\"),\n      sha1(\"email\").alias(\"email\"),\n      to_timestamp(col(\"creation_date\"),\"MM-dd-yyyy HH:mm:ss\").alias(\"creation_date\"),\n      to_timestamp(col(\"last_activity_date\"),\"MM-dd-yyyy HH:mm:ss\").alias(\"last_activity_date\"),\n      \"firstname\", \n      \"lastname\", \n      \"address\", \n      \"city\", \n      \"last_ip\", \n      \"postcode\"\n    )\n  )","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"Clean and anonymize User data","showCommandTitle":true,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"2e0cf2e3-0ab4-4a62-a264-aad60d51cea7"},{"version":"CommandV1","origId":2948424166895131,"guid":"c652df43-632a-470f-aa85-851e9aabdfbf","subtype":"command","commandType":"auto","position":10.0,"command":"%md\n### 3/ Ingest spend information\n\nThis is the same logic as for the customer data, we consume from the view defined in the TEST/PROD ingestion notebooks.\n\nWe're also adding an expectation on the ID column as we'll join the 2 tables based on this field, and we want to track it's data quality","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"e458446a-fa06-4802-8c55-38d8134b597d"},{"version":"CommandV1","origId":2948424166895140,"guid":"3f0a2321-53a0-4127-baac-6f75aa6c4ddd","subtype":"command","commandType":"auto","position":11.0,"command":"@dlt.table(comment=\"Spending score from raw data\")\n@dlt.expect_all_or_drop(get_rules('spend_silver_dlt'))\ndef spend_silver_dlt():\n    return dlt.read_stream(\"raw_spend_data\")","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"Ingest user spending score","showCommandTitle":true,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"f071c8e5-7a13-4dfc-8ac4-3c1e2f48c14a"},{"version":"CommandV1","origId":2948424166895149,"guid":"e5573cd2-2ee3-4943-abbf-8756980d9c29","subtype":"command","commandType":"auto","position":12.0,"command":"%md\n### 4/ Joining the 2 tables to create the gold layer\nWe can now join the 2 tables on customer ID to create our final gold table.\n\nAs our ML model will be using `age`, `annual_income` and `spending_score` we're adding expectation to only keep valid entries ","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"c42df692-e82b-4a0b-a339-66e93088f045"},{"version":"CommandV1","origId":2948424166895159,"guid":"121bfb5c-80ba-48ea-9ecc-e8e9f5377249","subtype":"command","commandType":"auto","position":13.0,"command":"@dlt.table(comment=\"Final user table with all information for Analysis / ML\")\n@dlt.expect_all_or_drop(get_rules('user_gold_dlt'))\ndef user_gold_dlt():\n  return dlt.read_stream(\"user_silver_dlt\").join(dlt.read(\"spend_silver_dlt\"), [\"id\"], \"left\")","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"Join both data to create our final table","showCommandTitle":true,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"64227c17-2e52-48fb-8ffb-39594a58289e"},{"version":"CommandV1","origId":2948424166895168,"guid":"c2ffff79-dd2f-4607-8197-3b090d7c9a12","subtype":"command","commandType":"auto","position":14.0,"command":"%md # Our pipeline is now ready to be tested!\n\nOur pipeline now entirely defined.\n\nHere are a couple of example we might want to test:\n\n* Are we safely handling wrong data type as entry (ex: customer ID is sent as an incompatible STRING)\n* Are we resilient to NULL values in our primary keys\n* Are we enforcing uniqueness in our primary keys\n* Are we properly applying business logic (ex: proper aggregation, anonymization of PII field etc)","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"2122ecdf-8003-4246-b28e-7ffbdf6bae53"},{"version":"CommandV1","origId":2948424166895177,"guid":"710c0cbc-891d-4721-925b-76799f38501e","subtype":"command","commandType":"auto","position":15.0,"command":"%md\n## Creating the test dataset\n\nThe next step is to create a test dataset.\n\nCreating the test dataset is a critical step. As any Unit tests, we need to add all possible data variation to ensure our logic is properly implemented.\n\nAs example, let's make sure we'll ingest data having NULL id or ids as string.\n\nOpen the [./test/DLT-Test-Dataset-setup]($./test/DLT-Test-Dataset-setup) notebook to see how this is done","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"60e33c54-3829-431a-9a54-a65d0aa2c420"},{"version":"CommandV1","origId":2948424166895179,"guid":"ad9539c5-2702-4780-8f5c-0b7849b299c6","subtype":"command","commandType":"auto","position":16.0,"command":"%md\n## Defining the Unit Tests\n\nWe now have the data ready.\n\nThe final step is creating the actual test.\n\nOpen the [./test/DLT-Tests]($./test/DLT-Tests) notebook to see how this is done!","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"0155b84d-decc-4680-8b00-039b1fa31d51"},{"version":"CommandV1","origId":2948424166895194,"guid":"af9007ef-94de-422a-98cf-cbb0a5776ad8","subtype":"command","commandType":"auto","position":17.0,"command":"%md\n# That's it! our pipeline is fully ready & tested.\n\nWe can then process as usual: build dashboard to track production metrics (ex: data quality & quantity) but also BI reporting & Data Science for final business use-case leveraging the Lakehouse:\n\nHere is a full example of the test pipeline definition.\n\nNote that we have 3 notebooks in the DLT pipeline:\n\n* **DLT-ingest_test**: ingesting our test datasets\n* **DLT-pipeline-to-test**: the actual pipeline we want to test\n* **test/DLT-Tests**: the test definition\n\nRemember that you'll have to schedule FULL REFRESH everytime your run the pipeline to get accurate test results (we want to consume all the entry dataset from scratch).\n\nThis test pipeline can be scheduled to run within a Workflow, or as part of a CICD step (ex: triggered after a git commit)\n\n```\n{\n    \"clusters\": [\n        {\n            \"label\": \"default\",\n            \"autoscale\": {\n                \"min_workers\": 1,\n                \"max_workers\": 5\n            }\n        }\n    ],\n    \"development\": true,\n    \"continuous\": false,\n    \"channel\": \"CURRENT\",\n    \"edition\": \"advanced\",\n    \"libraries\": [\n        {\n            \"notebook\": {\n                \"path\": \"/Repos/xxxx/Delta-Live-Table-Unit-Test/ingestion_profile/DLT-ingest_test\"\n            }\n        },\n        {\n            \"notebook\": {\n                \"path\": \"/Repos/xxxx/Delta-Live-Table-Unit-Test/DLT-pipeline-to-test\"\n            }\n        },\n        {\n            \"notebook\": {\n                \"path\": \"/Repos/xxxx/Delta-Live-Table-Unit-Test/test/DLT-Tests\"\n            }\n        }\n    ],\n    \"name\": \"xxxx_retail_tests\",\n    \"storage\": \"/Users/xxxx/field_demos_retail_test/dlt\",\n    \"target\": \"/xxxx/retail_test\"\n}\n```","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"a55add6e-fbd0-4645-8547-8a545cebccc0"},{"version":"CommandV1","origId":2948424166895204,"guid":"2e11d733-6ec2-4d10-8827-7f59a7c36471","subtype":"command","commandType":"auto","position":18.0,"command":"%md\n# Going further with DLT","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"6c2c4fc1-d89e-4cc0-b03d-86d0fbc242ed"},{"version":"CommandV1","origId":2948424166895214,"guid":"9f9bd13d-265c-4bb7-baf1-f0f009551b01","subtype":"command","commandType":"auto","position":19.0,"command":"%md\n## Checking your data quality metrics with Delta Live Table\nDelta Live Tables tracks all your data quality metrics. You can leverage the expecations directly as SQL table with Databricks SQL to track your expectation metrics and send alerts as required. This let you build the following dashboards:\n\n<img width=\"1000\" src=\"https://github.com/QuentinAmbard/databricks-demo/raw/main/retail/resources/images/retail-dlt-data-quality-dashboard.png\">\n\n<a href=\"https://e2-demo-field-eng.cloud.databricks.com/sql/dashboards/6f73dd1b-17b1-49d0-9a11-b3772a2c3357-dlt---retail-data-quality-stats?o=1444828305810485\" target=\"_blank\">Data Quality Dashboard</a>","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"214dd9da-47bc-4739-8059-932c59941e11"},{"version":"CommandV1","origId":2948424166895224,"guid":"b9a6b569-6c9d-4d58-8a2d-f1c6d6031002","subtype":"command","commandType":"auto","position":20.0,"command":"%md\n## Building our first business dashboard with Databricks SQL\n\nLet's switch to Databricks SQL to build a new dashboard based on all the data we ingested.\n\n<img width=\"1000\" src=\"https://github.com/QuentinAmbard/databricks-demo/raw/main/retail/resources/images/retail-dashboard.png\"/>\n\n<a href=\"https://e2-demo-field-eng.cloud.databricks.com/sql/dashboards/ab66e6c6-c2c5-4434-b784-ea5b02fe5eeb-sales-report?o=1444828305810485\" target=\"_blank\">Business Dashboard</a>","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{},"metadata":{}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"0c7e0024-edb3-4a3b-80f3-518eca86c2b4"}],"dashboards":[],"guid":"dc6c2da4-9551-4c13-8caa-1993435062ee","globalVars":{},"iPythonMetadata":null,"inputWidgets":{},"notebookMetadata":{"pythonIndentUnit":2},"reposExportFormat":"SOURCE"}"""
    i = Installer()
    c = i.replace_dynamic_links_pipeline(t, [{"id": "dlt-test", "uid": "uuuiduuu"}])
    assert """<a dbdemos-pipeline-id="dlt-test" href="https://e2-demo-field-eng.cloud.databricks.com/?o=1444828305810485#joblist/pipelines/uuuiduuu">Delta Live Table Pipeline for unit-test demo</""" in c

test_dynamic_link()